// ===========================================================
// Version:        3.0.2
// ===========================================================
/* ***********************************************************
@Copyright Alexander V. Bakhshiev, 2002.
E-mail:		alexab@ailab.ru
url:            http://ailab.ru

This file - part of the project: Neuro Modeler Software Developer Kit (NMSDK)

File License:        BSD License
Project License:     BSD License
See file license.txt for more information
*********************************************************** */

#ifndef NPULSE_MEMBRANE_COMMON_H
#define NPULSE_MEMBRANE_COMMON_H

#include "NPulseChannelCommon.h"

namespace NMSDK {

class NPulseNeuron;

class RDK_LIB_TYPE NPulseMembraneCommon: public UNet
{
public: // Параметры
/// Признак наличия усреднения в выходных данных нейрона
ULProperty<bool, NPulseMembraneCommon, ptPubParameter> UseAveragePotential;

public: // Данные

protected: // Временные переменные
// Ионные механизмы
vector<NPulseChannelCommon*> Channels;

// Синапсы
vector<NPulseSynapseCommon*> Synapses;

public: // Методы
// --------------------------
// Конструкторы и деструкторы
// --------------------------
NPulseMembraneCommon(void);
virtual ~NPulseMembraneCommon(void);
// --------------------------

// --------------------------
// Методы управления параметрами
// --------------------------
/// Признак наличия усреднения в выходных данных нейрона
bool SetUseAveragePotential(const bool &value);
// --------------------------

// --------------------------
// Методы управления временными перменными
// --------------------------
// Ионные механизмы
size_t GetNumChannels(void) const;
NPulseChannelCommon* GetChannel(size_t i);
// --------------------------

// --------------------------
// Системные методы управления объектом
// --------------------------
// Выделяет память для новой чистой копии объекта этого класса
virtual NPulseMembraneCommon* New(void);
// --------------------------

// --------------------------
// Методы доступа к компонентам
// --------------------------
// Метод проверяет на допустимость объекта данного типа
// в качестве компоненты данного объекта
// Метод возвращает 'true' в случае допустимости
// и 'false' в случае некорректного типа
virtual bool CheckComponentType(UEPtr<UContainer> comp) const;
// --------------------------

// --------------------------
// Скрытые методы управления компонентами
// --------------------------
protected:
// Выполняет завершающие пользовательские действия
// при добавлении дочернего компонента в этот объект
// Метод будет вызван только если comp был
// успешно добавлен в список компонент
virtual bool AAddComponent(UEPtr<UContainer> comp, UEPtr<UIPointer> pointer=0);

// Выполняет предварительные пользовательские действия
// при удалении дочернего компонента из этого объекта
// Метод будет вызван только если comp
// существует в списке компонент
virtual bool ADelComponent(UEPtr<UContainer> comp);
// --------------------------

// --------------------------
// Скрытые методы управления счетом
// --------------------------
protected:
// Восстановление настроек по умолчанию и сброс процесса счета
virtual bool ADefault(void);

// Обеспечивает сборку внутренней структуры объекта
// после настройки параметров
// Автоматически вызывает метод Reset() и выставляет Ready в true
// в случае успешной сборки
virtual bool ABuild(void);

// Сброс процесса счета.
virtual bool AReset(void);

// Выполняет расчет этого объекта
virtual bool ACalculate(void);
// --------------------------
};

}
#endif

