// ===========================================================
// Version:        3.0.2
// ===========================================================
/* ***********************************************************
@Copyright Alexander V. Bakhshiev, 2002.
E-mail:		alexab@ailab.ru
url:            http://ailab.ru

This file - part of the project: Neuro Modeler Software Developer Kit (NMSDK)

File License:        BSD License
Project License:     BSD License
See file license.txt for more information
*********************************************************** */

#ifndef NPULSE_CHANNEL_H
#define NPULSE_CHANNEL_H

#include "../../Kernel/NSupport.h"
#include "NPulseSynapse.h"

namespace NMSDK {

class NPulseChannel: public UNet
{
public: // Общедоступные свойства
// Емкость мембраны
RDK::ULProperty<real,NPulseChannel> Capacity;

// Сопротивление мембраны
RDK::ULProperty<real,NPulseChannel> Resistance;

// Сопротивление перезаряда мембраны
RDK::ULProperty<real,NPulseChannel> FBResistance;

// Тип ионного механизма
// <0 - накапливает отрицательный вклад в потенциал
// >0 - накапливает положительный вклад в потенциал
RDK::ULProperty<real,NPulseChannel> Type;

public: // Данные

protected: // Основные свойства

protected: // Временные переменные

public: // Методы
// --------------------------
// Конструкторы и деструкторы
// --------------------------
NPulseChannel(void);
virtual ~NPulseChannel(void);
// --------------------------

// --------------------------
// Методы управления специфическими компонентами
// --------------------------
// Возвращает число синапсов
size_t GetNumSynapses(void) const;

// Возвращает синапс по индексу
UEPtr<NPulseSynapse> GetSynapse(size_t i);
// --------------------------

// --------------------------
// Методы управления общедоступными свойствами
// --------------------------
// Емкость мембраны
bool SetCapacity(const real &value);

// Сопротивление мембраны
bool SetResistance(const real &value);

// Сопротивление перезаряда мембраны
bool SetFBResistance(const real &value);
// --------------------------

// --------------------------
// Методы управления объектом
// --------------------------
// Подключает синапс хебба synapse к низкопороговой зоне нейрона-владельца
// Возвращает false только если произошла ошибка установки связи
// Если synapse == 0, то подключает все синапсы хебба
bool InstallHebbSynapses(UEPtr<UContainer> synapse=0);
// --------------------------

// --------------------------
// Системные методы управления объектом
// --------------------------
// Выделяет память для новой чистой копии объекта этого класса
virtual NPulseChannel* New(void);
// --------------------------

// --------------------------
// Методы доступа к компонентам
// --------------------------
// Метод проверяет на допустимость объекта данного типа
// в качестве компоненты данного объекта
// Метод возвращает 'true' в случае допустимости
// и 'false' в случае некорректного типа
virtual bool CheckComponentType(UEPtr<UContainer> comp) const;
// --------------------------

// --------------------------
// Скрытые методы управления компонентами
// --------------------------
protected:
// Выполняет завершающие пользовательские действия
// при добавлении дочернего компонента в этот объект
// Метод будет вызван только если comp был
// успешно добавлен в список компонент
virtual bool AAddComponent(UEPtr<UContainer> comp, UEPtr<UIPointer> pointer=0);

// Выполняет предварительные пользовательские действия
// при удалении дочернего компонента из этого объекта
// Метод будет вызван только если comp
// существует в списке компонент
virtual bool ADelComponent(UEPtr<UContainer> comp);
// --------------------------

// --------------------------
// Скрытые методы управления счетом
// --------------------------
protected:
// Восстановление настроек по умолчанию и сброс процесса счета
virtual bool ADefault(void);

// Обеспечивает сборку внутренней структуры объекта
// после настройки параметров
// Автоматически вызывает метод Reset() и выставляет Ready в true
// в случае успешной сборки
virtual bool ABuild(void);

// Сброс процесса счета.
virtual bool AReset(void);

// Выполняет расчет этого объекта
virtual bool ACalculate(void);
// --------------------------
};

}
#endif
