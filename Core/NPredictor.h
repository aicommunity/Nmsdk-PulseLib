// ===========================================================
// Version:        3.0.2
// ===========================================================
/* ***********************************************************
@Copyright Alexander V. Bakhshiev, 2002.
E-mail:		alexab@ailab.ru
url:            http://ailab.ru

This file - part of the project: Neuro Modeler Software Developer Kit (NMSDK)

File License:        BSD License
Project License:     BSD License
See file license.txt for more information
*********************************************************** */

#ifndef NPREDICTOR_H
#define NPREDICTOR_H

#include "NPulseGenerator.h"
#include "NPulseNeuron.h"
#include "../../../Rdk/Deploy/Include/rdk.h"
#include <iostream>
#include <fstream>
#include <cstring>

namespace NMSDK {

using namespace RDK;

// Класс, создающий группу нейронов для моделирования условного рефлекса
class RDK_LIB_TYPE NPredictor: public UNet
{
public: // Параметры
/// Режим сборки структуры нейрона
/// 0 - автоматическая сборка не производится
/// 1 - Создаём группу нейронов для моделирования условного рефлекса.
/// Нейроны организованы в качестве 2 каналов информации +
/// промежуточный слой, реализующий возникновение условного рефлекса.
/// Первый канал: безусловный раздражитель -> безусловный рефлекс
/// Второй канал: условный раздражитель
/// На первом этапе обучаются входные нейроны 2-х каналов, каждый своему паттерну импульсов.
/// На втором этапе обучается элемент "И" промежуточного слоя, который
/// должен реагировать единичным выходным импульсом при активации двух входов одновременно.
/// На третьем этапе происходит наращивание синапсов на большом нейроне до тех пор,
/// пока большой нейрон не начинает генерировать сигналы. Генерация сигнала большим
/// нейроном вызывает формирование связи выхода нейрона 2-ого канала на элемент
/// "ИЛИ" 1-ого канала.
ULProperty<int,NPredictor, ptPubParameter> StructureBuildMode;

/// Режим ввода входных значений
/// 0 - ввод матрицы входных значений производится вручную
/// 1 - использование внешнего источника сигнала
ULProperty<int, NPredictor, ptPubParameter> InputMode;

///Матрица входных значений (используется в ручном режиме)
///Строки содержат N значений элемента входного вектора в моменты времени t, t-tau, ... t-(N-1)tau,
///где tau - интервал между измерениями состояния входа, N - число измерений
///Столбцы содержат M значений, составляющих входной вектор. M - размерность вектора
ULProperty<MDMatrix<double>, NPredictor, ptPubParameter> InputMatrix;

////Число предшествующих измерений входного вектора =
/// = количеству столбцов матрицы входных значений
ULProperty<int, NPredictor, ptPubParameter> InputCols;

////Размерность входного вектора =
/// = количеству строк матрицы входных значений
ULProperty<int, NPredictor, ptPubParameter> InputRows;

///Интервал tau между измерениями состояния входа (в режиме работы с внешним источником сигнала)
ULProperty<double, NPredictor, ptPubParameter> MeasurementPeriod;

/// Входной сигнал (альтернатива матрице входных значений, используется в режиме работы с внешним источником сигнала)
UPropertyInputData<MDMatrix<double>,NPredictor, ptInput | ptPubState> Input;

/// Результат вычислений, предсказанное значение
UPropertyOutputData<MDMatrix<double>, NPredictor, ptOutput | ptPubState> Output;



protected:
///Последовательность из N значений i-го элемента вектора  в моменты времени t, t-tau, ... t-(N-1)tau,
///где tau - интервал между измерениями состояния входа, N - число измерений
MDMatrix<double> input_pattern;

///Начало интервала tau между измерениями состояния входа (в режиме работы с внешним источником сигнала)
double measurement_period_start;

///Счетчик элементов input_pattern (в режиме работы с внешним источником сигнала)
int k;

///Флаг для записи значенй в input_pattern (в режиме работы с внешним источником сигнала)
bool between_measurements;


public: // Методы
// --------------------------
// Конструкторы и деструкторы
// --------------------------
NPredictor(void);
virtual ~NPredictor(void);
// --------------------------

// --------------------------
// Методы упраления параметрами
// --------------------------
/// Режим сборки структуры нейрона
bool SetStructureBuildMode(const int &value);

/// Режим расчёта нейрона
bool SetInputMode(const int &value);

/// Матрица входных значений
bool SetInputMatrix(const MDMatrix<double> &value);

////Число предшествующих измерений входного вектора =
/// = количеству столбцов матрицы входных значений
bool SetInputCols(const int &value);

///Размерность входного вектора =
/// = количеству строк матрицы входных значений
bool SetInputRows(const int &value);

///Интервал tau между измерениями состояния входа
/// (в режиме работы с источником сигнала)
bool SetMeasurementPeriod(const double &value);

// --------------------------

// --------------------------
// Методы доступа к временным переменным
// --------------------------

// --------------------------

// --------------------------
// Системные методы управления объектом
// --------------------------
// Выделяет память для новой чистой копии объекта этого класса
virtual NPredictor* New(void);
static UComponent* NewStatic(void);
// --------------------------

// --------------------------
// Скрытые методы управления компонентами
// --------------------------
protected:
// Выполняет завершающие пользовательские действия
// при добавлении дочернего компонента в этот объект
// Метод будет вызван только если comp был
// успешно добавлен в список компонент
virtual bool AAddComponent(UEPtr<UContainer> comp, UEPtr<UIPointer> pointer=0);

// Выполняет предварительные пользовательские действия
// при удалении дочернего компонента из этого объекта
// Метод будет вызван только если comp
// существует в списке компонент
virtual bool ADelComponent(UEPtr<UContainer> comp);
// --------------------------


// --------------------------
// Скрытые методы управления счетом
// --------------------------
protected:
/// Осуществляет сборку структуры в соответствии с выбранными именами компонентов
bool BuildStructure();

///Осуществляет расчет следующего значения для одного элемента входного вектора по 5 предшествующим
double Predict(MDMatrix<double> &input_pattern);

// Восстановление настроек по умолчанию и сброс процесса счета
virtual bool ADefault(void);

// Обеспечивает сборку внутренней структуры объекта
// после настройки параметров
// Автоматически вызывает метод Reset() и выставляет Ready в true
// в случае успешной сборки
virtual bool ABuild(void);

// Сброс процесса счета.
virtual bool AReset(void);

// Выполняет расчет этого объекта
virtual bool ACalculate(void);
// --------------------------
};

}
#endif
